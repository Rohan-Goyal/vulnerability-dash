#!/usr/bin/env ipython3
from dataclasses import dataclass
from os import access
from pprint import pprint
from typing import List
from github import Github
from subprocess import run
import json
from notion_client import Client
from notion_database.database import Database
from datetime import datetime, date

read_token = (
    lambda: "61092fbb-817d-40f8-be1f-0659358fb8ab"
)  # Placeholder for now, replace with more secure.
org_id = lambda: "cde0c9ab-d76d-4ef2-802c-5799b036f86f"
VULN_SCHEMA = "vuln_schema.json"

# client = snyk.SnykClient(read_token(), version="2022-02-16~experimental", url="https://api.snyk.io/rest")
# client = snyk.SnykClient(read_token())

# projects = client.get(f"/orgs/{org_id()}/projects").json()
# pprint(projects)


# client=snyk.SnykClient(read_token())

# org = client.organizations.get(org_id())

# projects = client.projects.all()
# for project in projects:
# print(project.vulnerabilities)
# TODO: Story for filtering out dismissed/ignored/solved.
access_token = lambda: ""
name = ""
gh = Github(access_token())
repo = gh.get_repo(name)
notion_token = ""

notion = Client(auth=notion_token)


def read_properties(schema:str):
    """Read a schema stored as a JSON file, and translate that into a valid property object for a notion DB

    :param schema: The name/path of the JSON file where the schema is defined
    :returns: A dictionary representing a valid properties value for a notion DB.

    """
    with open(schema, "r") as s:
        properties = json.load(s)
        # TODO Optional json tinkering/processing
    return properties


def create_notion_db(parent_id, db_name:str, schema:str):
    """Create a notion DB on the page specified by PARENT_ID, structured according to SCHEMA
    :param parent_id:
    :param db_name:
    :param schema:
    :returns: TODO
    """
    db = Database(notion_token)
    return db.create_database(
        page_id=parent_id, title=db_name, properties=read_properties(schema)
    )


def create_vuln_db(parent):
    """TODO describe function

    :param parent:
    :returns:

    """
    return create_notion_db(parent, "Vulnerabilities", VULN_SCHEMA)


def populate_vuln_db(db_id):
    """Given a pointer to a Notion DB, populate it with vulnerability data from both

    :param db_id:
    :returns:

    """
    populate_snyk()
    populate_dependabot()


def get_dependabot_alerts(owner, repo, token):
    """Get a list of Dependabot alerts as JSON. Uses curl as a hack because dependabot API is in public beta.

    :param owner:
    :param repo:
    :param token:
    :returns:

    """
    base = "https://api.github.com"
    endpoint = f"/repos/{owner}/{repo}/dependabot/alerts"
    command = f"""curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer {token}" -H "X-GitHub-Api-Version: 2022-11-28" {base+endpoint}"""
    result = run(command)
    out = json.loads(result.stdout)
    return out


def get_snyk_alerts():
    """TODO describe function

    :returns:

    """

@dataclass
class Vulnerability:
    project: str
    source_file: str
    line: int
    severity: int  # Scale from 1-5 probably
    summary: str
    package: str
    status: str  # One of handled/dismissed/open
    discovered: datetime

@dataclass
class GithubVulnerability(Vulnerability):
    @staticmethod
    def get_alerts():
        pass

    @staticmethod
    def parse_vulnerability(api_response: dict):
        """Given a portion of the API response representing a single vulnerability, extract relevant fields and create a Vulnerability object.

        :param api_response:
        :returns: GitHubVulnerability object representing the passed-in dependabot alert.
        """
@dataclass
class SnykVulnerability(Vulnerability):
    pass
